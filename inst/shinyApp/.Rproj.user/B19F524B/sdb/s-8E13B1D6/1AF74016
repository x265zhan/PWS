{
    "contents" : "## This File is Written by m1gao\n\n#' get an object of class \"PWS\"\n#' \n#' Gets the nearby PWS (personal weather station) from \\url{http://www.wunderground.com} based on a original search location and a distance range. \n#' \n#' Three methods of specifying a original search location are defined. The function first searches the location by \\code{lat} and \\code{lon} if they are supplied. If \\code{lat} and \\code{lon} are not supplied, the function next searches the location by the \\code{zipcode} if it is supplied. If again \\code{zipcode} is not supplied, then the function searches the location by the \\code{city}. If \\code{state} is supplied, then the city will be searched within the USA. Otherwise if \\code{country} is supplied, then the city will be searched outside the USA.\n#' The function then gets the nearby PWS of the original search location within a distance range which is specified by \\code{distance}.      \n#' \n#' @param lat a numeric that specifies the latitude of the original search location; must be between -180 and 180\n#' @param lon a numeric that specifies the longitude of the original search location; must be between -180 and 180\n#' @param zipcode a numeric that specifies the zipcode of the original search location; only valid for locations within USA\n#' @param city a single character string that specifies the city of the original search location\n#' @param state a single character string that specifies the state of the original search location; should be supplied if the location is within USA\n#' @param country a single character string that specifies the country of the original search location; should be supplied if the location is outside USA\n#' @param distance a positive numeric which specifies the distance range of the nearby PWS from the original search location\n#' @importFrom httr GET\n#' @importFrom jsonlite fromJSON \n#' \n#' @return An S4 object of class \\code{\\link{PWS-class}} containing the information about the original search location and the nearby PWS. The object contains the following slots:\n#' \\describe{\n#' \\item{\\code{city}}{a single character string that shows the city of the original search location}\n#' \\item{\\code{state}}{a single character string that shows the state of the original search location; is character(0) if the origin is outside the U.S.A}\n#' \\item{\\code{country}}{a single character string that shows the country of the original search location; is character(0) if the the origin is within the U.S.A}\n#' \\item{\\code{lat}}{a numeric that shows the latitude of the original search location; must be between -180 and 180}\n#' \\item{\\code{lon}}{a numeric that shows the longitude of the original search location; must be between -180 and 180}\n#' \\item{\\code{data}}{a data frame that contains the information of the nearby PWS; in particular, the columns of the data frame should be: \\describe{\n#' \\item{\\code{neighborhood}}{a single character string that shows the neighborhood of the PWS}\n#' \\item{\\code{city}}{a single character string that shows the city of the PWS}\n#' \\item{\\code{state}}{a single character string that shows the state of the PWS}\n#' \\item{\\code{country}}{a single character string that shows the country of the PWS}\n#' \\item{\\code{id}}{a numeric that shows the id of the PWS}\n#' \\item{\\code{lat}}{a numeric that shows the latitude of the PWS}\n#' \\item{\\code{lon}}{a numeric that shows the longitude of the PWS}\n#' \\item{\\code{distance_km}}{a positive integer that shows the distance from the PWS to the original search location in kilometers}\n#' \\item{\\code{distance_mi}}{a positive integer that shows the distance from the PWS to the original search location in miles}\n#' }}}\n#' see \\code{\\link{PWS-class}} for more details\n#' @name getPWS\n#' @rdname getPWS\n#' @export\n#' @seealso \\code{\\link{PWS-class}}\n#' @examples\n#' a = getPWS(zipcode = 94305)\n#' b = getPWS(city = \"San Francisco\", state = \"CA\")\n#' c = getPWS(lat = 37, lon = -120)\n#' \nutils::globalVariables(c(\"distance_km\"))\n\ngetPWS <- function(lat = NA, lon = NA, zipcode = NA, city = NA, state = NA, country = NA, distance = 50) {\n  key <- .getAPI() #generates an api key\n  baseurl <- paste0(\"http://api.wunderground.com/api/\", key, \"/geolookup/q/\")\n  url <- \"\"\n  if (length(distance) > 1 || !is.numeric(distance) || distance < 0) stop(\"Invalid distance value\")\n  \n  if (length(lat) > 1 || length(lon) > 1) stop (\"Please enter a single numeric value for latitude/longitude\")\n  \n  if (!is.na(lat) && is.na(lon)) {\n    stop(\"Please enter a longitude value\")\n  } else if (is.na(lat) && !is.na(lon)) {\n    stop(\"Please enter a latitude value\")\n  } else if (!is.na(lat) && !is.na(lon)) { #search by lat and lon\n    if (!is.numeric(lat) || !is.numeric(lon) || lat < -180 || lat > 180 || lon < -180 || lon > 180) stop (\"Invalid latitude/longitude value\")\n    url <- paste0(baseurl, lat, \",\", lon, \".json\")\n    \n  } else if (length(zipcode) > 1 || (length(zipcode) == 1 && !is.na(zipcode))) { #search by zipcode\n    if (length(zipcode) > 1) stop(\"Please enter a single zipcode\")\n    if (!is.numeric(zipcode) || zipcode < 10000 || zipcode > 99999) stop(\"Please enter a valid zipcode\")\n    url <- paste0(baseurl, zipcode, \".json\")\n    \n  } else { #search by city\n    if (length(city) > 1) stop(\"Please enter a single city!\")\n    if (is.na(city) || !is.character(city) || city == \"\") stop(\"Invalid city name!\")\n    if (length(state) == 1 && length(country) == 1 && is.na(state) && is.na(country)) stop(\"Please enter a state or a country!\")\n    if (length(state) > 1 || (length(state) == 1 && !is.na(state))) { #by state, within USA\n      if (length(state) > 1) stop(\"Please enter a single state\")\n      if (!is.character(state) || !state %in% state.abb) stop(\"Invalid state name!\")\n      url <- paste0(baseurl, state, \"/\", paste(strsplit(city, \"\\\\s+\")[[1]], collapse=\"_\"), \".json\")\n    } else if (length(country) > 1 || (length(country) == 1 && !is.na(country))) { #by country, outside USA\n      if (length(country) > 1) stop(\"Please enter a single country\")\n      if (!is.character(country)) stop(\"Invalid country name!\")\n      url <- paste0(baseurl, paste(strsplit(country, \"\\\\s+\")[[1]], collapse=\"_\"), \"/\", paste(strsplit(city, \"\\\\s+\")[[1]], collapse=\"_\"), \".json\")\n    }\n    \n  }\n  \n  r <- httr::GET(url)\n  d <- jsonlite::fromJSON(rawToChar(r$content))\n  if (!\"location\" %in% names(d) || class(d$location$nearby_weather_stations$pws$station)!=\"data.frame\") stop(\"No matched PWS found based on your search!\")\n  \n  if (d$location$country_name == \"USA\") {\n    return (new(\"PWS\", city=d$location$city, state=d$location$state, lat=as.numeric(d$location$lat), lon=as.numeric(d$location$lon), data=subset(d$location$nearby_weather_stations$pws$station, distance_km <= distance)))\n  } else {\n    return (new(\"PWS\", city=d$location$city, country=d$location$country_name, lat=as.numeric(d$location$lat), lon=as.numeric(d$location$lon), data=subset(d$location$nearby_weather_stations$pws$station, distance_km <= distance)))\n  }\n}\n",
    "created" : 1458772033542.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3581351552",
    "id" : "1AF74016",
    "lastKnownWriteTime" : 1457853855,
    "path" : "~/Documents/stat290/project/mypack/getPWS.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_source"
}